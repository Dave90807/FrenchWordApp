// ContentView.swift
import SwiftUI

struct ContentView: View {
    @AppStorage("currentWord") private var currentWordData: Data = Data()
    @AppStorage("answers") private var answerData: Data = Data()
    @State private var currentWord: Word
    @State private var userInput = ""
    @State private var isCorrect: Bool?
    @State private var answers: [Answer] = []
    
    private let sampleWords = [
        Word(french: "bonjour", english: "hello"),
        Word(french: "au revoir", english: "goodbye"),
        Word(french: "merci", english: "thank you"),
        Word(french: "chien", english: "dog")
    ]
    
    init() {
        _currentWord = State(initialValue: Word(french: "bonjour", english: "hello"))
    }

    var body: some View {
        VStack(spacing: 20) {
            Text("French Word of the Day")
                .font(.title)
            Text(currentWord.french)
                .font(.largeTitle)
                .foregroundColor(.blue)
            TextField("Enter English Translation", text: $userInput)
                .textFieldStyle(.roundedBorder)
                .padding(.horizontal)
            Button("Check Answer") {
                isCorrect = userInput.lowercased() == currentWord.english.lowercased()
                answers.append(Answer(wordId: currentWord.id, isCorrect: isCorrect ?? false, timestamp: Date()))
                saveAnswers()
                userInput = ""
            }
            .padding()
            .background(Color.blue)
            .foregroundColor(.white)
            .cornerRadius(10)
            if let isCorrect = isCorrect {
                Text(isCorrect ? "Correct!" : "Incorrect, try again!")
                    .foregroundColor(isCorrect ? .green : .red)
            }
            Button("New Word") {
                currentWord = sampleWords.randomElement() ?? sampleWords[0]
                saveCurrentWord()
                userInput = ""
                isCorrect = nil
            }
            .padding()
            .background(Color.blue)
            .foregroundColor(.white)
            .cornerRadius(10)
        }
        .padding()
        .onAppear {
            loadAnswers()
            if let decodedWord = try? JSONDecoder().decode(Word.self, from: currentWordData), sampleWords.contains(where: { $0.id == decodedWord.id }) {
                currentWord = decodedWord
            } else {
                currentWord = sampleWords.randomElement() ?? Word(french: "bonjour", english: "hello")
            }
            saveCurrentWord()
            // Q: Why .onAppear? A: Ensures currentWord is initialized before accessing sampleWords
            // Q: Why no UI glitch? A: SwiftUI renders after .onAppear, so currentWord updates before display
            // Q: Why eligibility.plist error? A: Simulator system file issue, likely triggered by breakpoint
        }
    }
    
    private func saveCurrentWord() {
        do {
            let encoded = try JSONEncoder().encode(currentWord)
            currentWordData = encoded
            print("Saved currentWord: \(currentWord)")
        } catch {
            print("Error saving currentWord: \(error.localizedDescription)")
        }
    }
    
    private func saveAnswers() {
        do {
            let encoded = try JSONEncoder().encode(answers)
            answerData = encoded
            print("Saved answers: \(answers)")
        } catch {
            print("Error saving answers: \(error.localizedDescription)")
        }
    }
    
    private func loadAnswers() {
        do {
            if !answerData.isEmpty {
                let decoded = try JSONDecoder().decode([Answer].self, from: answerData)
                answers = decoded
                print("Loaded answers: \(answers)")
            } else {
                print("No answers data to load")
            }
        } catch {
            print("Loading answers failed: \(error.localizedDescription)")
            answers = []
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
